name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  check-dependencies:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install pip-tools
      run: pip install pip-tools

    - name: Check for Python dependency updates
      id: check_updates
      run: |
        echo "Checking for dependency updates..."
        
        # Check each requirements file
        updated_files=""
        
        for req_file in agent/requirements.txt kafka/producer/requirements.txt airflow/requirements.txt; do
          if [ -f "$req_file" ]; then
            echo "Checking $req_file..."
            
            # Create a backup
            cp "$req_file" "$req_file.backup"
            
            # Try to update (this is a dry run approach)
            pip-compile --upgrade "$req_file" --output-file "$req_file.new" 2>/dev/null || {
              echo "Failed to compile $req_file, skipping..."
              rm -f "$req_file.new"
              continue
            }
            
            # Check if there are differences
            if ! diff "$req_file" "$req_file.new" >/dev/null 2>&1; then
              echo "Updates found for $req_file"
              updated_files="$updated_files $req_file"
              mv "$req_file.new" "$req_file"
            else
              echo "No updates for $req_file"
              rm -f "$req_file.new"
            fi
            
            rm -f "$req_file.backup"
          fi
        done
        
        if [ -n "$updated_files" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "updated_files=$updated_files" >> $GITHUB_OUTPUT
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
        fi

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        
        # Check each requirements file for vulnerabilities
        for req_file in agent/requirements.txt kafka/producer/requirements.txt airflow/requirements.txt; do
          if [ -f "$req_file" ]; then
            echo "Checking security vulnerabilities in $req_file..."
            safety check -r "$req_file" --json --output "safety-$req_file.json" || true
          fi
        done

    - name: Create Pull Request for updates
      if: steps.check_updates.outputs.has_updates == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore: update dependencies
          
          Automated dependency updates for improved security and performance.
          
          Updated files: ${{ steps.check_updates.outputs.updated_files }}
        title: 'chore: automated dependency updates'
        body: |
          ## 🔄 Automated Dependency Updates
          
          This PR contains automated dependency updates to keep the project secure and up-to-date.
          
          ### 📦 Updated Files
          ${{ steps.check_updates.outputs.updated_files }}
          
          ### 🔍 What's Changed
          - Updated Python package dependencies to latest compatible versions
          - Security vulnerability fixes (if any)
          - Performance improvements from updated packages
          
          ### ✅ Validation
          - [ ] All tests pass
          - [ ] No breaking changes detected
          - [ ] Security scan completed
          
          ### 🤖 Automated Process
          This PR was created automatically by the dependency update workflow.
          Please review the changes and merge if everything looks good.
          
          ---
          Generated by GitHub Actions on $(date)
        branch: automated/dependency-updates
        delete-branch: true
        labels: |
          dependencies
          automated
          maintenance

  check-docker-base-images:
    name: Check Docker Base Image Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check for base image updates
      run: |
        echo "🐳 Checking for Docker base image updates..."
        
        # Extract current base images
        echo "Current base images:"
        grep -h "^FROM " Dockerfile.* docker-compose.yml || true
        
        # Check if images have newer versions available
        images=(
          "python:3.10-slim"
          "apache/airflow:2.8.0-python3.10"
          "confluentinc/cp-kafka:7.4.0"
          "confluentinc/cp-zookeeper:7.4.0"
          "bitnami/spark:3.4.0"
          "postgres:13"
          "ollama/ollama:latest"
        )
        
        for image in "${images[@]}"; do
          echo "Checking $image..."
          # This would typically check for updates via Docker registry API
          # For now, just log the check
          docker pull "$image" --quiet && echo "✅ $image is current" || echo "⚠️  Could not check $image"
        done

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install security tools
      run: |
        pip install bandit safety semgrep

    - name: Run Bandit security scan
      run: |
        bandit -r agent ops kafka/producer -f json -o bandit-report.json
        echo "Bandit scan completed"

    - name: Run Safety dependency check
      run: |
        for req_file in agent/requirements.txt kafka/producer/requirements.txt airflow/requirements.txt; do
          if [ -f "$req_file" ]; then
            echo "Running safety check on $req_file..."
            safety check -r "$req_file" --json --output "safety-$(basename $req_file).json" || true
          fi
        done

    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json agent/ ops/ kafka/producer/ || true
        echo "Semgrep scan completed"

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-reports
        path: |
          bandit-report.json
          safety-*.json
          semgrep-report.json

    - name: Check for critical vulnerabilities
      run: |
        echo "🔍 Analyzing security scan results..."
        
        # Check Bandit results for high severity issues
        if [ -f bandit-report.json ]; then
          high_severity=$(jq '.results[] | select(.issue_severity == "HIGH")' bandit-report.json | jq -s 'length')
          if [ "$high_severity" -gt 0 ]; then
            echo "⚠️ Found $high_severity high severity security issues"
            echo "Please review the bandit report"
          else
            echo "✅ No high severity security issues found"
          fi
        fi

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        pip install -r agent/requirements.txt
        pip install memory-profiler line-profiler

    - name: Run basic performance tests
      run: |
        echo "🚀 Running basic performance checks..."
        
        # Simple import time test
        python -c "
        import time
        start = time.time()
        from agent.decision_agent import PipelineDecisionAgent
        from agent.tools import PipelineTools
        end = time.time()
        print(f'Import time: {end - start:.3f}s')
        "
        
        # Memory usage test
        python -c "
        import psutil
        import os
        from agent.decision_agent import PipelineDecisionAgent
        
        process = psutil.Process(os.getpid())
        memory_before = process.memory_info().rss / 1024 / 1024
        
        # Initialize agent
        agent = PipelineDecisionAgent()
        
        memory_after = process.memory_info().rss / 1024 / 1024
        print(f'Memory usage: {memory_after - memory_before:.2f} MB')
        "

  create-summary:
    name: Create Maintenance Summary
    runs-on: ubuntu-latest
    needs: [check-dependencies, check-docker-base-images, security-audit, performance-check]
    if: always()
    
    steps:
    - name: Create maintenance summary
      run: |
        echo "# 🔧 Weekly Maintenance Summary" > maintenance-summary.md
        echo "" >> maintenance-summary.md
        echo "Generated on: $(date)" >> maintenance-summary.md
        echo "" >> maintenance-summary.md
        
        echo "## 📦 Dependency Status" >> maintenance-summary.md
        if [ "${{ needs.check-dependencies.result }}" == "success" ]; then
          echo "✅ Dependency check completed successfully" >> maintenance-summary.md
        else
          echo "❌ Dependency check failed" >> maintenance-summary.md
        fi
        echo "" >> maintenance-summary.md
        
        echo "## 🐳 Docker Image Status" >> maintenance-summary.md
        if [ "${{ needs.check-docker-base-images.result }}" == "success" ]; then
          echo "✅ Docker image check completed" >> maintenance-summary.md
        else
          echo "❌ Docker image check failed" >> maintenance-summary.md
        fi
        echo "" >> maintenance-summary.md
        
        echo "## 🔒 Security Audit" >> maintenance-summary.md
        if [ "${{ needs.security-audit.result }}" == "success" ]; then
          echo "✅ Security audit completed" >> maintenance-summary.md
        else
          echo "❌ Security audit failed" >> maintenance-summary.md
        fi
        echo "" >> maintenance-summary.md
        
        echo "## ⚡ Performance Check" >> maintenance-summary.md
        if [ "${{ needs.performance-check.result }}" == "success" ]; then
          echo "✅ Performance check completed" >> maintenance-summary.md
        else
          echo "❌ Performance check failed" >> maintenance-summary.md
        fi
        echo "" >> maintenance-summary.md
        
        echo "---" >> maintenance-summary.md
        echo "*This summary was generated automatically by the maintenance workflow.*" >> maintenance-summary.md
        
        cat maintenance-summary.md

    - name: Upload maintenance summary
      uses: actions/upload-artifact@v3
      with:
        name: maintenance-summary
        path: maintenance-summary.md