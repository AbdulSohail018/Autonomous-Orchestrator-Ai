name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort ruff bandit safety
        pip install -r agent/requirements.txt
        pip install -r kafka/producer/requirements.txt

    - name: Run Black formatter check
      run: black --check --diff agent ops kafka/producer

    - name: Run isort import sorting check
      run: isort --check-only --diff agent ops kafka/producer

    - name: Run Ruff linting
      run: ruff check agent ops kafka/producer --output-format=github

    - name: Run Bandit security scan
      run: bandit -r agent ops kafka/producer -f json -o bandit-report.json

    - name: Run Safety dependency check
      run: safety check --json --output safety-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        pip install -r agent/requirements.txt
        pip install -r kafka/producer/requirements.txt
        pip install pandas pydantic requests python-dotenv

    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short --cov=agent --cov=ops --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment
      run: |
        cp .env.example .env
        echo "AIRFLOW_UID=50000" >> .env

    - name: Start Kafka services
      run: |
        docker-compose -f kafka/docker-compose.kafka.yml up -d
        
    - name: Wait for Kafka to be ready
      run: |
        timeout 120s bash -c 'until docker-compose -f kafka/docker-compose.kafka.yml exec -T broker kafka-broker-api-versions --bootstrap-server localhost:9092; do sleep 5; done'

    - name: Test Kafka connectivity
      run: |
        docker-compose -f kafka/docker-compose.kafka.yml exec -T broker kafka-topics --create --topic test-integration --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1
        docker-compose -f kafka/docker-compose.kafka.yml exec -T broker kafka-topics --list --bootstrap-server localhost:9092 | grep test-integration

    - name: Build producer image
      run: |
        docker build -f Dockerfile.producer -t test-producer .

    - name: Test producer functionality
      run: |
        docker run --network host --rm test-producer python3 producer/produce_events.py --rate 1 --duration 10

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f kafka/docker-compose.kafka.yml down -v

  config-validation:
    name: Configuration Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install validation dependencies
      run: |
        pip install jsonschema pyyaml

    - name: Validate JSON configurations
      run: |
        python -c "import json; json.load(open('kafka/schemas/customer_events.avsc'))" || exit 1
        python -c "import json; json.load(open('dq/expectations/customers_expectation_suite.json'))" || exit 1
        echo "‚úÖ JSON configurations are valid"

    - name: Validate YAML configurations
      run: |
        python -c "import yaml; yaml.safe_load(open('airflow/include/config.yml'))" || exit 1
        python -c "import yaml; yaml.safe_load(open('dq/ge_checkpoint.yml'))" || exit 1
        echo "‚úÖ YAML configurations are valid"

    - name: Validate Docker configurations
      run: |
        docker-compose -f docker-compose.yml config > /dev/null
        docker-compose -f kafka/docker-compose.kafka.yml config > /dev/null
        echo "‚úÖ Docker Compose configurations are valid"

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check README completeness
      run: |
        if [ ! -f README.md ]; then
          echo "‚ùå README.md is missing"
          exit 1
        fi
        
        # Check for required sections
        grep -q "Architecture" README.md || { echo "‚ùå Architecture section missing"; exit 1; }
        grep -q "Quick Start" README.md || { echo "‚ùå Quick Start section missing"; exit 1; }
        grep -q "Configuration" README.md || { echo "‚ùå Configuration section missing"; exit 1; }
        grep -q "Troubleshooting" README.md || { echo "‚ùå Troubleshooting section missing"; exit 1; }
        
        echo "‚úÖ Documentation is complete"

    - name: Check code documentation
      run: |
        # Check for docstrings in Python files
        python -c "
        import ast
        import sys
        
        def check_docstrings(file_path):
            with open(file_path, 'r') as f:
                tree = ast.parse(f.read())
            
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                    if not ast.get_docstring(node):
                        print(f'Warning: {file_path}:{node.lineno} - {node.name} missing docstring')
        
        import os
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.py') and not file.startswith('test_'):
                    file_path = os.path.join(root, file)
                    if 'agent/' in file_path or 'ops/' in file_path:
                        check_docstrings(file_path)
        "

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, config-validation, documentation]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' }}
      run: |
        echo "üéâ All CI checks passed successfully!"
        echo "Build is ready for deployment"

    - name: Notify failure
      if: ${{ needs.code-quality.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
      run: |
        echo "‚ùå CI pipeline failed"
        echo "Please check the failed jobs and fix issues"
        exit 1